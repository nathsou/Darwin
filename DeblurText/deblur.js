(()=>{"use strict";var t={446:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Chromosome=void 0;class s{constructor(t,e,s){this.genes=[],this.fitness=0,this.randGene=e,this.randNum=s,this.genes=t,this.length=t.length}static generate(t,e,n){const o=[];for(let s=0;s<t;s++)o.push(e());return new s(o,e,n)}getFitness(){return this.fitness}setFitness(t){this.fitness=t}compare(t){let e=0;for(let s=0;s<Math.min(this.length,t.length);s++)e+=this.genes[s]!==t.genes[s]?1:0;return e}mutateWith(t=1/this.length,e){e(this,t)}crossoverWith(t,e){return e(this,t)}setGenes(t){this.genes=[...t]}getGenes(){return this.genes}copy(t){this.genes=t.genes.slice(),this.length=t.length,this.randGene=t.randGene,this.fitness=t.fitness}clone(){const t=s.generate(this.length,this.randGene,this.randNum);return t.copy(this),t}randomGene(){return this.randGene()}randomNumber(){return this.randNum()}}e.Chromosome=s},348:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.crossoverMethod=void 0,e.crossoverMethod={singlePoint:(t,e)=>{const s=Math.floor(t.randomNumber()*t.getGenes().length);return[[...t.getGenes().slice(0,s),...e.getGenes().slice(s)],[...e.getGenes().slice(0,s),...t.getGenes().slice(s)]]},twoPoint:(t,e)=>{const s=[],n=[],o=t.getGenes(),a=e.getGenes(),r=t.getGenes().length;let i=Math.floor(t.randomNumber()*r),h=Math.floor(t.randomNumber()*r);i>h&&([i,h]=[h,i]);for(let t=0;t<r;t++)s.push(t<i?o[t]:t<h?a[t]:o[t]),n.push(t<i?a[t]:t<h?o[t]:a[t]);return[s,n]},uniform:(t,e)=>{const s=[],n=[],o=t.getGenes(),a=e.getGenes(),r=t.getGenes().length;for(let e=0;e<r;e++){const r=t.randomNumber()<.5;s.push(r?a[e]:o[e]),n.push(r?o[e]:a[e])}return[s,n]},halfUniform:(t,e)=>{let s=[],n=[];const o=t.getGenes(),a=e.getGenes(),r=t.getGenes().length,i=[];for(let t=0;t<r;t++)o[t]!==a[t]&&i.push(t);const h=i.length;s=o.slice(),n=a.slice();for(let e=0;e<h/2;e++){let e=Math.floor(t.randomNumber()*i.length);s[i[e]]=a[i[e]],n[i[e]]=o[i[e]],i.splice(e,1)}return[s,n]},ordered:(t,e)=>{const s=[],n=[],o=t.getGenes(),a=e.getGenes(),r=t.getGenes().length;let i=Math.floor(t.randomNumber()*r),h=Math.floor(t.randomNumber()*r),l=i;i=Math.min(i,h),h=Math.max(l,h);for(let t=i;t<h;t++)s[t]=a[t],n[t]=o[t];for(let t=0;t<r;t++){if(-1===s.indexOf(o[t]))s[t]=o[t];else for(let e=0;e<r;e++)-1===s.indexOf(o[e])&&(s[t]=o[e]);if(-1===n.indexOf(a[t]))n[t]=a[t];else for(let e=0;e<a.length;e++)-1===n.indexOf(a[e])&&(n[t]=a[e])}return[s,n]}}},803:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Darwin=void 0;const n=s(446),o=s(348),a=s(666),r=s(675);e.Darwin=class{constructor(t){this.population=[],this.statsNeedUpdate=!0,this.generation=0,this.params=Object.assign({crossoverRate:.7,mutationRate:1/t.populationSize,crossoverMethod:o.crossoverMethod.singlePoint,mutationMethod:a.mutationMethod.flip,eliteCount:Math.ceil(t.populationSize/25),eliteCopies:1,randomNumber:Math.random},t);for(let e=0;e<t.populationSize;e++){const t=n.Chromosome.generate(this.params.chromosomeLength,this.params.randomGene,this.params.randomNumber);this.population.push(t)}this.stats={fittest:this.population[0],averageFitness:0,totalFitness:0,fittestIndex:0}}duplicateElite(t){const{eliteCount:e,eliteCopies:s}=this.params;if(e>0){const n=this.getTopChromosomes(e);t.push(...n);for(let o=0;o<e;o++)for(let e=0;e<s;e++)t.push(n[o].clone())}}crossover(t){const{populationSize:e,crossoverRate:s,crossoverMethod:o,randomGene:a,randomNumber:r}=this.params;for(;t.length<e;)if(this.params.randomNumber()<s){const e=this.getRandomChromosome(),s=this.getRandomChromosome(),[i,h]=e.crossoverWith(s,o);t.push(new n.Chromosome(i,a,r),new n.Chromosome(h,a,r))}this.params.populationSize%2==1&&t.pop()}mutate(t){for(const e of t)e.mutateWith(this.params.mutationRate,this.params.mutationMethod)}updateFitness(t){for(let e=0;e<this.population.length;e++){const s=this.population[e];s.setFitness(t(s.getGenes(),e))}}mate(){const t=[];this.duplicateElite(t),this.crossover(t),this.mutate(t),this.population=t,this.generation+=1,this.statsNeedUpdate=!0}getPopulation(){return this.population}getChromosomeAt(t){return this.population[t]}getRandomChromosome(){if(this.updateStats(),0===this.stats.totalFitness)return this.population[Math.floor(this.params.randomNumber()*this.population.length)];const t=this.params.randomNumber()*this.stats.totalFitness;let e=0;for(let s=0;s<this.population.length;s++)if(e+=this.population[s].getFitness(),e>t)return this.population[s];return this.population[0]}getTopChromosomes(t){return r.selectKBest(this.population,t)}getParams(){return this.params}getGeneration(){return this.generation}getStats(){return this.stats}updateStats(t=!1){if(t||this.statsNeedUpdate){let t=0,e=0,s=0;for(let n=0;n<this.population.length;n++){const o=this.population[n].getFitness();t+=o,o>e&&(e=o,s=n)}this.stats.totalFitness=t,this.stats.averageFitness=t/this.params.populationSize,this.stats.fittest=this.population[s].clone(),this.stats.fittestIndex=s,this.statsNeedUpdate=!1}return this.stats}}},827:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Deblurrer=e.renderBlurredText=void 0;const n=s(348),o=s(803),a=s(666),r=s(147),i=s(799);e.renderBlurredText=(t,e,s,n)=>{t.clearRect(0,0,t.canvas.width,t.canvas.height),t.font=s,t.filter=`blur(${n}px)`,t.fillText(e,2,30)},e.Deblurrer=class{constructor(t){this.bestFitness=0,this.bestText="",this.memo=new Map,this.isRunning=!1,this.update=t=>{this.params=t,this.targetImageData=this.renderTarget(),this.population=new o.Darwin(this.updateDarwinParams()),this.bestFitness=0,this.bestText="",this.generateContexts()},this.targetContext=i.createCanvas({},{border:"1px solid black"})[1],this.update(t)}update(t){this.isRunning=!1,this.params=t,this.renderTarget(),this.updateDarwinParams(),this.generateContexts(),this.population=new o.Darwin(this.darwinParams),this.targetImageData=this.renderTarget()}updateDarwinParams(){return this.darwinParams={populationSize:this.params.populationSize,randomGene:r.randChar,chromosomeLength:this.params.target.length,mutationMethod:a.mutationMethod.flip,crossoverMethod:n.crossoverMethod.uniform,mutationRate:.1,crossoverRate:.95},this.darwinParams}renderTarget(){const{width:t}=((t,e)=>{const[s,n]=i.createCanvas({width:1e3,height:100});return n.font=e,n.measureText(t)})(this.params.target,this.params.font);return this.width=t+5,this.height=35,this.targetContext.canvas.width=this.width,this.targetContext.canvas.height=this.height,e.renderBlurredText(this.targetContext,this.params.target,this.params.font,this.params.blurRadius),this.targetContext.getImageData(0,0,this.width,this.height)}generateContexts(){this.contexts=[];for(let t=0;t<this.params.populationSize;t++)this.contexts.push(i.createCanvas({width:this.width,height:this.height},{border:"1px solid black"})[1])}tick(){this.memo.size>1e4&&this.memo.clear(),this.population.updateFitness(((t,s)=>{var n;const o=this.contexts[s],a=t.join("");if(e.renderBlurredText(o,a,this.params.font,this.params.blurRadius),!this.memo.has(a)){const t=((t,e)=>{let s=0;for(let n=0;n<t.data.length;n+=4){const o=Math.abs(e.data[n+3]-t.data[n+3]);s+=Math.pow(255-o,2)}return Math.pow(1e3,s/(Math.pow(255,2)*t.data.length/4))})(o.getImageData(0,0,this.width,this.height),this.targetImageData);t>this.bestFitness&&(this.bestFitness=t,this.bestText=a,console.log(this.bestText,this.bestFitness)),this.memo.set(a,t)}return null!==(n=this.memo.get(a))&&void 0!==n?n:0})),this.params.onTick&&this.params.onTick(),this.population.mate()}start(){this.isRunning=!0;const t=()=>{this.tick(),this.isRunning&&this.bestFitness<1e3&&requestAnimationFrame(t.bind(this))};t()}getCurrentBest(){return{string:this.bestText,fitness:this.bestFitness}}getTargetContext(){return this.targetContext}getPopulation(){return this.population}getContexts(){return this.contexts}}},147:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.randChar=e.alphabet=void 0,e.alphabet=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"," ","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","?","!",".","#","@","&","*","$","%","+","-","/","=","0","1","2","3","4","5","6","7","8","9","(",")",",","'",'"',":","_","-"],e.randChar=function(){return e.alphabet[Math.floor(Math.random()*e.alphabet.length)]}},799:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.namedInput=e.appendChildren=e.createCanvas=e.h=void 0,e.h=(t,e={},s={})=>{const n=document.createElement(t);for(const[t,s]of Object.entries(e))n[t]=s;for(const t in s){const e=s[t];void 0!==e&&(n.style[t]=e)}return n},e.createCanvas=(t={},s={})=>{const n=e.h("canvas",t,s),o=n.getContext("2d");if(null===o)throw new Error("Could not create a 2d canvas");return[n,o]},e.appendChildren=(t,e)=>{for(const s of e)t.appendChild(s);return t},e.namedInput=(t,s)=>{const n=e.h("input",s),o=e.h("span",{textContent:"range"===s.type?`${t} : ${n.value}`:t}),a=e.appendChildren(e.h("div"),[o,n]);return n.addEventListener("change",(()=>{"range"===s.type&&(o.textContent=`${t} : ${n.value}`)})),{elem:a,value:()=>n.value}}},666:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.mutationMethod=void 0,e.mutationMethod={flip:(t,e)=>{const s=t.getGenes(),n=s.length;for(let o=0;o<n;o++)t.randomNumber()<e&&(s[o]=t.randomGene())},swap:(t,e)=>{const s=t.getGenes(),n=s.length;for(let o=0;o<n;o++)if(t.randomNumber()<e){const t=Math.floor(Math.random()*n);[s[o],s[t]]=[s[t],s[o]]}}}},675:(t,e)=>{function s(t,e=0,o=t.length-1){const a=t[Math.floor((e+o)/2)].getFitness();if(e<o){const r=n(t,e,o,a);s(t,e,r-1),s(t,r,o)}}function n(t,e,s,n){for(;e<=s;){for(;t[e].getFitness()>n;)e++;for(;t[s].getFitness()<n;)s--;e<=s&&([t[e],t[s]]=[t[s],t[e]],e++,s--)}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.selectKBest=void 0,e.selectKBest=function(t,e){return function(t,e,o=0,a=t.length-1){const r=t[Math.floor((o+a)/2)].getFitness();if(o<a){const i=n(t,o,a,r);s(t,o,i-1),i<e&&s(t,i,a)}}(t,e),t.slice(0,e)}}},e={};function s(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,s),a.exports}(()=>{const t=s(799),e=s(827),n=(()=>{const s=t.namedInput("text",{type:"text",value:"DARWIN",onchange:u,onkeyup:u}),n=t.namedInput("blur radius",{type:"range",min:"0",max:"10",step:"1",value:"4",onchange:u}),o=t.namedInput("font size",{type:"range",min:"10",max:"40",step:"1",value:"30",onchange:u}),a=t.namedInput("population",{type:"range",min:"5",max:"1000",step:"1",value:"200",onchange:u}),r=t.h("p",{textContent:"generation: 0"}),i=t.h("p",{textContent:"best: "}),h=()=>{r.textContent=`generation: ${l.getPopulation().getGeneration()}`,i.textContent=`best: ${l.getCurrentBest().string}`},l=new e.Deblurrer({populationSize:parseInt(a.value()),target:s.value(),blurRadius:parseInt(n.value()),font:`${o.value()}px sans-serif`,onTick:h});function u(){l.update({populationSize:parseInt(a.value()),target:s.value(),blurRadius:parseInt(n.value()),font:`${o.value()}px sans-serif`,onTick:h}),l.tick(),m()}const p=t.appendChildren(t.h("div",{},{display:"flex",flexWrap:"wrap"}),l.getContexts().map((t=>t.canvas))),d=t.appendChildren(t.h("div"),[l.getTargetContext().canvas,s.elem,n.elem,o.elem,a.elem,r,i,t.h("button",{textContent:"start",onclick:()=>{l.start()}}),p]),m=()=>{console.log("rerender",l.getContexts().length),p.innerHTML="",t.appendChildren(p,l.getContexts().map((t=>t.canvas)))};return u(),d})();document.body.appendChild(n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,