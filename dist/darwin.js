!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.darwin=e():t.darwin=e()}("undefined"!=typeof window?window:this,(function(){return(()=>{"use strict";var t={446:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Chromosome=void 0;const o=s(348),n=s(660),i=s(666);class r extends n.default{constructor(t,e){super(),this.genes=[],this.fitness=0,this.randGene=e,this.genes=t,this.length=t.length}static generate(t,e){const s=[];for(let o=0;o<t;o++)s.push(e());return new r(s,e)}getFitness(){return this.fitness}setFitness(t){this.fitness=t,this.emit("update_fitness",t)}compare(t){let e=0;for(let s=0;s<Math.min(this.length,t.length);s++)e+=this.genes[s]!==t.genes[s]?1:0;return e}mutateFlip(t){for(let e=0;e<this.length;e++)Math.random()<t&&(this.genes[e]=this.randGene())}mutateSwap(t){for(let e=0;e<this.length;e++)if(Math.random()<t){const t=Math.floor(Math.random()*this.length),s=this.genes[e];this.genes[e]=this.genes[t],this.genes[t]=s}}mutate(t=1/this.length,e){if("number"==typeof e)switch(e){case i.MutationMethod.FLIP:this.mutateFlip(t);break;case i.MutationMethod.SWAP:this.mutateSwap(t)}else this.setGenes(e(this.getGenes()))}crossoverSinglePoint(t){const e=Math.floor(Math.random()*this.length);return[[...this.genes.slice(0,e),...t.genes.slice(e)],[...t.genes.slice(0,e),...this.genes.slice(e)]]}crossoverTwoPoint(t){const e=[],s=[];let o=Math.floor(Math.random()*this.length),n=Math.floor(Math.random()*this.length);o>n&&([o,n]=[n,o]);for(let i=0;i<this.length;i++)e.push(i<o?this.genes[i]:i<n?t.genes[i]:this.genes[i]),s.push(i<o?t.genes[i]:i<n?this.genes[i]:t.genes[i]);return[e,s]}crossoverUniform(t){const e=[],s=[];for(let o=0;o<this.length;o++){let n=Math.random()<.5;e.push(n?t.genes[o]:this.genes[o]),s.push(n?this.genes[o]:t.genes[o])}return[e,s]}crossoverHalfUniform(t){let e=[],s=[];const o=[];for(let e=0;e<this.length;e++)this.genes[e]!==t.genes[e]&&o.push(e);const n=o.length;e=this.genes.slice(),s=t.genes.slice();for(let i=0;i<n/2;i++){let n=Math.floor(Math.random()*o.length);e[o[n]]=t.genes[o[n]],s[o[n]]=this.genes[o[n]],o.splice(n,1)}return[e,s]}crossoverOrdered(t){const e=[],s=[];let o=Math.floor(Math.random()*this.length),n=Math.floor(Math.random()*this.length),i=o;o=Math.min(o,n),n=Math.max(i,n);for(let i=o;i<n;i++)e[i]=t.genes[i],s[i]=this.genes[i];for(let o=0;o<this.length;o++){if(-1===e.indexOf(this.genes[o]))e[o]=this.genes[o];else for(let t=0;t<this.length;t++)-1===e.indexOf(this.genes[t])&&(e[o]=this.genes[t]);if(-1===s.indexOf(t.genes[o]))s[o]=t.genes[o];else for(let e=0;e<this.length;e++)-1===s.indexOf(t.genes[e])&&(s[o]=t.genes[e])}return[e,s]}crossover(t,e){if("number"==typeof e)switch(e){case o.CrossoverMethod.SINGLE_POINT:return this.crossoverSinglePoint(t);case o.CrossoverMethod.TWO_POINT:return this.crossoverTwoPoint(t);case o.CrossoverMethod.UNIFORM:return this.crossoverUniform(t);case o.CrossoverMethod.HALF_UNIFORM:return this.crossoverHalfUniform(t);case o.CrossoverMethod.ORDERED:return this.crossoverOrdered(t);default:throw new Error(`Unimplemented CrossoverMethod: ${e} (${o.CrossoverMethod[e]})`)}return e(t)}setGenes(t){this.genes=[...t]}getGenes(){return this.genes}copy(t){this.genes=t.genes.slice(),this.length=t.length,this.randGene=t.randGene,this.fitness=t.fitness}clone(){const t=r.generate(this.length,this.randGene);return t.copy(this),t}}e.Chromosome=r},348:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.CrossoverMethod=void 0,(s=e.CrossoverMethod||(e.CrossoverMethod={}))[s.SINGLE_POINT=0]="SINGLE_POINT",s[s.TWO_POINT=1]="TWO_POINT",s[s.UNIFORM=2]="UNIFORM",s[s.HALF_UNIFORM=3]="HALF_UNIFORM",s[s.ORDERED=4]="ORDERED"},660:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.eventHandlers=new Map}on(t,e){var s;this.isListening(t)||this.eventHandlers.set(t,[]),null===(s=this.eventHandlers.get(t))||void 0===s||s.push(e)}isListening(t){return this.eventHandlers.has(t)}emit(t,e,s){var o;if(this.isListening(t))for(const n of null!==(o=this.eventHandlers.get(t))&&void 0!==o?o:[])n.call(s,e)}bindEvent(t,e){t.on(e,(t=>this.emit(e,t)))}removeListener(t){this.eventHandlers.delete(t)}removeListeners(){this.eventHandlers.clear()}}},666:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.MutationMethod=void 0,(s=e.MutationMethod||(e.MutationMethod={}))[s.FLIP=0]="FLIP",s[s.SWAP=1]="SWAP"},675:(t,e)=>{function s(t,e=0,n=t.length-1){const i=t[Math.floor((e+n)/2)].getFitness();if(e<n){const r=o(t,e,n,i);s(t,e,r-1),s(t,r,n)}}function o(t,e,s,o){for(;e<=s;){for(;t[e].getFitness()>o;)e++;for(;t[s].getFitness()<o;)s--;e<=s&&([t[e],t[s]]=[t[s],t[e]],e++,s--)}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.selectKBest=void 0,e.selectKBest=function(t,e){return function(t,e,n=0,i=t.length-1){const r=t[Math.floor((n+i)/2)].getFitness();if(n<i){const h=o(t,n,i,r);s(t,n,h-1),h<e&&s(t,h,i)}}(t,e),t.slice(0,e)}}},e={};function s(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,s),i.exports}var o={};return(()=>{var t=o;Object.defineProperty(t,"__esModule",{value:!0}),t.Darwin=void 0;const e=s(446),n=s(348),i=s(666),r=s(675);t.Darwin=class{constructor(t){this.population=[],this.generation=0;const s=()=>{this.stats.needsUpdate=!0};for(let o=0;o<t.populationSize;o++){const o=e.Chromosome.generate(t.chromosomeLength,t.randGene);o.on("update_fitness",s),this.population.push(o)}this.params=Object.assign({crossoverRate:.7,mutationRate:1/t.populationSize,crossoverMethod:n.CrossoverMethod.SINGLE_POINT,mutationMethod:i.MutationMethod.FLIP,eliteCount:Math.ceil(t.populationSize/25),eliteCopies:1},t),this.stats={fittest:this.population[0],averageFitness:0,totalFitness:0,fittestIndex:0,needsUpdate:!0}}duplicateElite(t){const{eliteCount:e,eliteCopies:s}=this.params;if(e>0){const o=this.getTopChromosomes(e);t.push(...o);for(let n=0;n<e;n++)for(let e=0;e<s;e++)t.push(o[n].clone())}}crossover(t){const{populationSize:s,crossoverRate:o,crossoverMethod:n,randGene:i}=this.params;for(;t.length<s;)if(Math.random()<o){const s=this.getRandomChromosome(),o=this.getRandomChromosome(),[r,h]=s.crossover(o,n);t.push(new e.Chromosome(r,i),new e.Chromosome(h,i))}this.params.populationSize%2==1&&t.pop()}mutate(t){for(const e of t)e.mutate(this.params.mutationRate,this.params.mutationMethod)}updateFitness(t){for(let e=0;e<this.population.length;e++){const s=this.population[e];s.setFitness(t(s.getGenes()))}this.stats.needsUpdate=!0}mate(){const t=[];this.duplicateElite(t),this.crossover(t),this.mutate(t),this.population=t,this.generation+=1,this.updateStats(!0)}getPopulation(){return this.population}getChromosomeAt(t){return this.population[t]}getRandomChromosome(){if(this.updateStats(),0===this.stats.totalFitness)return this.population[Math.floor(Math.random()*this.population.length)];const t=Math.random()*this.stats.totalFitness;let e=0;for(let s=0;s<this.population.length;s++)if(e+=this.population[s].getFitness(),e>t)return this.population[s];return this.population[0]}getTopChromosomes(t){return r.selectKBest(this.population,t)}getAverageFitness(){return this.updateStats(),this.stats.averageFitness}getFittest(){return this.updateStats(),this.stats.fittest}getParams(){return this.params}getGeneration(){return this.generation}getStats(){return this.stats}updateStats(t=!1){if(t||this.stats.needsUpdate){let t=0,e=0,s=0;for(let o=0;o<this.population.length;o++){const n=this.population[o].getFitness();t+=n,n>e&&(e=n,s=o)}this.stats.totalFitness=t,this.stats.averageFitness=t/this.params.populationSize,this.stats.fittest=this.population[s].clone(),this.stats.fittestIndex=s,this.stats.needsUpdate=!1}}}})(),o})()}));