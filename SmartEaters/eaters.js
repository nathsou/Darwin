(()=>{"use strict";var t={446:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Chromosome=void 0;const i=s(660),n=s(666);class o extends i.default{constructor(t,e){super(),this.genes=[],this.fitness=0,this.randGene=e,this.genes=t,this.length=t.length}static generate(t,e){const s=[];for(let i=0;i<t;i++)s.push(e());return new o(s,e)}getFitness(){return this.fitness}setFitness(t){this.fitness=t,this.emit("update_fitness",t)}compare(t){let e=0;for(let s=0;s<Math.min(this.length,t.length);s++)e+=this.genes[s]!==t.genes[s]?1:0;return e}mutateFlip(t){for(let e=0;e<this.length;e++)Math.random()<t&&(this.genes[e]=this.randGene())}mutateSwap(t){for(let e=0;e<this.length;e++)if(Math.random()<t){const t=Math.floor(Math.random()*this.length),s=this.genes[e];this.genes[e]=this.genes[t],this.genes[t]=s}}mutate(t=1/this.length,e){if("number"==typeof e)switch(e){case n.MutationMethod.FLIP:this.mutateFlip(t);break;case n.MutationMethod.SWAP:this.mutateSwap(t)}else this.setGenes(e(this.getGenes()))}crossoverWith(t,e){return e(this,t)}setGenes(t){this.genes=[...t]}getGenes(){return this.genes}copy(t){this.genes=t.genes.slice(),this.length=t.length,this.randGene=t.randGene,this.fitness=t.fitness}clone(){const t=o.generate(this.length,this.randGene);return t.copy(this),t}}e.Chromosome=o},348:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CrossoverMethod=void 0,e.CrossoverMethod={singlePoint:(t,e)=>{const s=Math.floor(Math.random()*t.getGenes().length);return[[...t.getGenes().slice(0,s),...e.getGenes().slice(s)],[...e.getGenes().slice(0,s),...t.getGenes().slice(s)]]},twoPoint:(t,e)=>{const s=[],i=[],n=t.getGenes(),o=e.getGenes(),r=t.getGenes().length;let h=Math.floor(Math.random()*r),a=Math.floor(Math.random()*r);h>a&&([h,a]=[a,h]);for(let t=0;t<r;t++)s.push(t<h?n[t]:t<a?o[t]:n[t]),i.push(t<h?o[t]:t<a?n[t]:o[t]);return[s,i]},uniform:(t,e)=>{const s=[],i=[],n=t.getGenes(),o=e.getGenes(),r=t.getGenes().length;for(let t=0;t<r;t++){let e=Math.random()<.5;s.push(e?o[t]:n[t]),i.push(e?n[t]:o[t])}return[s,i]},halfUniform:(t,e)=>{let s=[],i=[];const n=t.getGenes(),o=e.getGenes(),r=t.getGenes().length,h=[];for(let t=0;t<r;t++)n[t]!==o[t]&&h.push(t);const a=h.length;s=n.slice(),i=o.slice();for(let t=0;t<a/2;t++){let t=Math.floor(Math.random()*h.length);s[h[t]]=o[h[t]],i[h[t]]=n[h[t]],h.splice(t,1)}return[s,i]},ordered:(t,e)=>{const s=[],i=[],n=t.getGenes(),o=e.getGenes(),r=t.getGenes().length;let h=Math.floor(Math.random()*r),a=Math.floor(Math.random()*r),l=h;h=Math.min(h,a),a=Math.max(l,a);for(let t=h;t<a;t++)s[t]=o[t],i[t]=n[t];for(let t=0;t<r;t++){if(-1===s.indexOf(n[t]))s[t]=n[t];else for(let e=0;e<r;e++)-1===s.indexOf(n[e])&&(s[t]=n[e]);if(-1===i.indexOf(o[t]))i[t]=o[t];else for(let e=0;e<o.length;e++)-1===i.indexOf(o[e])&&(i[t]=o[e])}return[s,i]}}},803:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Darwin=void 0;const i=s(446),n=s(348),o=s(666),r=s(675);e.Darwin=class{constructor(t){this.population=[],this.generation=0;const e=()=>{this.stats.needsUpdate=!0};for(let s=0;s<t.populationSize;s++){const s=i.Chromosome.generate(t.chromosomeLength,t.randGene);s.on("update_fitness",e),this.population.push(s)}this.params=Object.assign({crossoverRate:.7,mutationRate:1/t.populationSize,crossoverMethod:n.CrossoverMethod.singlePoint,mutationMethod:o.MutationMethod.FLIP,eliteCount:Math.ceil(t.populationSize/25),eliteCopies:1},t),this.stats={fittest:this.population[0],averageFitness:0,totalFitness:0,fittestIndex:0,needsUpdate:!0}}duplicateElite(t){const{eliteCount:e,eliteCopies:s}=this.params;if(e>0){const i=this.getTopChromosomes(e);t.push(...i);for(let n=0;n<e;n++)for(let e=0;e<s;e++)t.push(i[n].clone())}}crossover(t){const{populationSize:e,crossoverRate:s,crossoverMethod:n,randGene:o}=this.params;for(;t.length<e;)if(Math.random()<s){const e=this.getRandomChromosome(),s=this.getRandomChromosome(),[r,h]=e.crossoverWith(s,n);t.push(new i.Chromosome(r,o),new i.Chromosome(h,o))}this.params.populationSize%2==1&&t.pop()}mutate(t){for(const e of t)e.mutate(this.params.mutationRate,this.params.mutationMethod)}updateFitness(t){for(let e=0;e<this.population.length;e++){const s=this.population[e];s.setFitness(t(s.getGenes()))}this.stats.needsUpdate=!0}mate(){const t=[];this.duplicateElite(t),this.crossover(t),this.mutate(t),this.population=t,this.generation+=1,this.updateStats(!0)}getPopulation(){return this.population}getChromosomeAt(t){return this.population[t]}getRandomChromosome(){if(this.updateStats(),0===this.stats.totalFitness)return this.population[Math.floor(Math.random()*this.population.length)];const t=Math.random()*this.stats.totalFitness;let e=0;for(let s=0;s<this.population.length;s++)if(e+=this.population[s].getFitness(),e>t)return this.population[s];return this.population[0]}getTopChromosomes(t){return r.selectKBest(this.population,t)}getAverageFitness(){return this.updateStats(),this.stats.averageFitness}getFittest(){return this.updateStats(),this.stats.fittest}getParams(){return this.params}getGeneration(){return this.generation}getStats(){return this.stats}updateStats(t=!1){if(t||this.stats.needsUpdate){let t=0,e=0,s=0;for(let i=0;i<this.population.length;i++){const n=this.population[i].getFitness();t+=n,n>e&&(e=n,s=i)}this.stats.totalFitness=t,this.stats.averageFitness=t/this.params.populationSize,this.stats.fittest=this.population[s].clone(),this.stats.fittestIndex=s,this.stats.needsUpdate=!1}}}},598:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Eater=void 0;const i=s(835);e.Eater=class{constructor(t,e,s){this.pos=t,this.angle=e,this.chromosomeIdx=s}getChromosomeIdx(){return this.chromosomeIdx}getPosition(){return this.pos}setPosition(t){this.pos=t}getAngle(){return this.angle}setAngle(t){this.angle=t%i.MathUtils.TWO_PI}}},835:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.MathUtils=void 0,(s=e.MathUtils||(e.MathUtils={})).clamp=(t,e,s)=>t>=e&&t<=s?t:t<e?e:s,s.map=(t,e,s,i,n)=>(t-e)/(s-e)*(n-i)+i,s.TWO_PI=2*Math.PI},105:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NeuralNet=void 0;class s{constructor(){this.weightsAndBiases=[]}getWeight(t,e,s){return this.weightsAndBiases[this.offsets[t-1]+e*(this.numNeuronsPerLayer[t-1]+1)+s+1]}getBias(t,e){return this.weightsAndBiases[this.offsets[t-1]+e*(this.numNeuronsPerLayer[t-1]+1)]}feedforward(t){if(0===this.weightsAndBiases.length)throw new Error("Cannot feedforward before 'putWeights' or 'fromJSON' was called.");if(t.length!==this.numNeuronsPerLayer[0])throw new Error(`Expected ${this.numNeuronsPerLayer[0]} inputs, got ${t.length}.`);let e=t,s=[];for(let t=1;t<this.numNeuronsPerLayer.length;t++){s=[];for(let i=0;i<this.numNeuronsPerLayer[t];i++){let n=this.getBias(t,i);for(let s=0;s<this.numNeuronsPerLayer[t-1];s++)n+=this.getWeight(t,i,s)*e[s];s[i]=1/(1+Math.exp(-n))}e=s}return s}run(...t){return this.feedforward(t)}computeOffsets(){this.offsets=[0];let t=0;for(let e=1;e<this.numNeuronsPerLayer.length-1;e++)this.offsets.push(t+=this.numNeuronsPerLayer[e-1]*(this.numNeuronsPerLayer[e]+1))}putWeights(t,e){this.numNeuronsPerLayer=t,this.computeOffsets();const i=s.weightsCount(t);if(i!==e.length)throw new Error(`The number of weights do not match the given architecture, expected ${i}, got ${e.length}.`);this.weightsAndBiases=e}static weightsCount(t){let e=0;for(let s=1;s<t.length;s++)e+=t[s]*(t[s-1]+1);return e}toJSON(){return{weights_and_biases:this.weightsAndBiases,layers:this.numNeuronsPerLayer}}toFunction(){return{args:["inputs"],body:`\n            var json = ${JSON.stringify(this.toJSON())};\n\n            if (inputs.length !== json.layers[0])\n                throw new Error('Expected ' + json.layers[0] + ' inputs, got ' + inputs.length + '.');\n\n            var offsets = ${JSON.stringify(this.offsets)}, a = inputs, output;\n\n            for (var l = 1; l < json.layers.length; l++) {\n                output = [];\n                for (var j = 0; j < json.layers[l]; j++) {\n                    var z = json.weights_and_biases[offsets[l - 1] + j * (json.layers[l - 1] + 1)]; \n                    for (var k = 0; k < json.layers[l - 1]; k++)\n                        z += json.weights_and_biases[offsets[l - 1] + j * (json.layers[l - 1] + 1) + k + 1] * a[k];\n                    output[j] = 1 / (1 + Math.exp(-z));\n                }\n                a = output;\n            }\n\n            return output;\n        `}}static fromJSON(t){const e=new s;return e.putWeights(t.layers,t.weights_and_biases),e}static fromWeights(t,e){const i=new s;return i.putWeights(t,e),i}}e.NeuralNet=s},872:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SmartEaters=e.DPR=void 0;const i=s(348),n=s(803),o=s(598),r=s(105),h=s(157),a=s(835);e.DPR=window.devicePixelRatio,e.SmartEaters=class{constructor(t,s){this.ticks=0,this.selectedIndex=-1,this.followFittest=!1,this.paused=!1,this.fastMode=!1,this.fastModeRefreshRate=2,this.showLines=!1,this.hideNonSelected=!1,this.stopMating=!1,this.cnv=t;const l=this.cnv.getContext("2d");if(null===l)throw new Error("Could not get a 2d canvas context");this.ctx=l,this.params=Object.assign({populationSize:30,hiddenLayersSizes:[6],foodCount:40,crossoverRate:.7,mutationRate:.1,eliteCount:4,eliteCopies:1,maxSpeed:2,maxTurnRate:.3,ticksPerGen:1e3,crossoverMethod:i.CrossoverMethod.singlePoint,eaterSize:12,foodSize:5,wrapBorders:!0},s),this.layerSizes=[4,...this.params.hiddenLayersSizes,2],this.brain=new r.NeuralNet,this.genetics=new n.Darwin({populationSize:this.params.populationSize,randGene:()=>2*Math.random()-1,chromosomeLength:r.NeuralNet.weightsCount(this.layerSizes)}),this.population=this.genetics.getPopulation().map(((t,e)=>new o.Eater(this.randomPos(),Math.random()*a.MathUtils.TWO_PI,e))),this.cnv.addEventListener("click",(t=>{const s=new h.Vector2D(t.clientX*e.DPR,t.clientY*e.DPR);let i=0,n=1/0;for(let t=0;t<this.population.length;t++){const e=this.population[t].getPosition().distSq(s);e<n&&(n=e,i=t)}Math.pow(n,.5)<2*this.params.eaterSize*e.DPR?this.setSelected(i):this.selectedIndex=-1})),this.spawnFood()}spawnFood(){this.food=[];for(let t=0;t<this.params.foodCount;t++)this.food.push(this.randomPos())}randomPos(){return h.Vector2D.rand().hadamard([this.cnv.width,this.cnv.height])}getClosestFood(t){let e=0,s=1/0;for(let i=0;i<this.food.length;i++){const n=t.getPosition().distSq(this.food[i]);n<s&&(s=n,e=i)}return{index:e,dist:Math.pow(s,.5)}}tick(){if(!this.paused){++this.ticks>this.params.ticksPerGen&&(this.nextGeneration(),this.ticks=0);for(const t of this.population){const s=this.genetics.getChromosomeAt(t.getChromosomeIdx());this.brain.putWeights(this.layerSizes,s.getGenes());const i=this.getClosestFood(t);t.closestFood=h.Vector2D.clone(this.food[i.index]);const[n,o]=this.food[i.index].sub(t.getPosition()).normalize().toArray();if(i.dist<(this.params.eaterSize+this.params.foodSize)/2){const t=s.getFitness();s.setFitness(2*(0===t?1:t)),this.food[i.index]=this.randomPos()}const r=[Math.cos(t.getAngle()),Math.sin(t.getAngle())],[l,d]=this.brain.run(...r,n,o),c=a.MathUtils.clamp(l-d,-this.params.maxTurnRate,this.params.maxTurnRate);t.setAngle(t.getAngle()+c),t.lookat=new h.Vector2D(r[0],r[1]),t.foodDir=new h.Vector2D(n,o),t.getPosition().plus(t.lookat.times(this.params.maxSpeed*e.DPR));const u=t.getPosition();this.params.wrapBorders?(u.x>this.cnv.width&&(u.x=0),u.x<0&&(u.x=this.cnv.width),u.y>this.cnv.height&&(u.y=0),u.y<0&&(u.y=this.cnv.height)):(u.x>this.cnv.width&&(u.x=this.cnv.width),u.x<0&&(u.x=0),u.y>this.cnv.height&&(u.y=this.cnv.height),u.y<0&&(u.y=0))}}}pause(){this.paused=!this.paused}nextGeneration(){if(!this.stopMating){this.genetics.mate();for(const t of this.genetics.getPopulation())t.setFitness(0);this.spawnFood();for(const t of this.population)t.setPosition(this.randomPos());this.selectedIndex=-1}}run(){const t=()=>{this.tick(),this.render(),this.fastMode?setTimeout(t,0):requestAnimationFrame(t)};t()}render(){this.fastMode&&this.ticks%this.fastModeRefreshRate!=0||(this.genetics.updateStats(!0),this.ctx.clearRect(0,0,this.cnv.width,this.cnv.height),this.drawFood(),this.drawEaters(),this.highlightSelectedEater(),this.drawGenerationInfo())}drawGenerationInfo(){const t=0!==this.genetics.getFittest().getFitness()?Math.log2(this.genetics.getFittest().getFitness()):0;this.ctx.fillStyle="black",this.ctx.fillText(`Generation: ${this.genetics.getGeneration()}`,5,10),this.ctx.fillText(`avg: ${Math.log2(1+this.genetics.getAverageFitness()).toFixed(3)}`,5,25),this.ctx.fillText(`best: ${t}`,5,40),this.ctx.fillText(`ticks: ${this.ticks} / ${this.params.ticksPerGen}`,5,55)}highlightSelectedEater(){if(this.followFittest&&(this.selectedIndex=this.genetics.getStats().fittestIndex),-1!==this.selectedIndex&&!this.hideNonSelected){this.ctx.lineWidth=2,this.ctx.strokeStyle="red",this.ctx.beginPath();const t=this.population[this.selectedIndex],s=t.getPosition();this.ctx.arc(s.x/e.DPR,s.y/e.DPR,2*this.params.eaterSize,0,a.MathUtils.TWO_PI),this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.moveTo(s.x/e.DPR,s.y/e.DPR);const i=s.add(t.foodDir.times(2*this.params.eaterSize*e.DPR));this.ctx.lineTo(i.x/e.DPR,i.y/e.DPR),this.ctx.stroke()}}drawEaters(){const t=[46,204,113],s=[255,0,0],i=Math.log2(this.genetics.getFittest().getFitness());let n=0;for(const o of this.population){if(this.showLines){this.ctx.beginPath(),this.ctx.lineWidth=1,this.ctx.strokeStyle="black",this.ctx.moveTo(o.getPosition().x/e.DPR,o.getPosition().y/e.DPR);const t=o.getPosition().add(o.foodDir.times(o.getPosition().dist(o.closestFood)));this.ctx.lineTo(t.x/e.DPR,t.y/e.DPR),this.ctx.stroke()}if(!this.hideNonSelected||void 0===this.selectedIndex||n++===this.selectedIndex){const n=Math.log2(this.genetics.getChromosomeAt(o.getChromosomeIdx()).getFitness()),[r,l,d]=[a.MathUtils.clamp(a.MathUtils.map(n,0,i,t[0],s[0]),Math.min(t[0],s[0]),Math.max(t[0],s[0])),a.MathUtils.clamp(a.MathUtils.map(n,0,i,t[1],s[1]),Math.min(t[1],s[1]),Math.max(t[1],s[1])),a.MathUtils.clamp(a.MathUtils.map(n,0,i,t[2],s[2]),Math.min(t[2],s[2]),Math.max(t[2],s[2]))];this.ctx.lineWidth=4,this.ctx.fillStyle=`rgb(\n                    ${Math.floor(r)},\n                    ${Math.floor(l)},\n                    ${Math.floor(d)}\n                )`,this.ctx.beginPath();const c=o.lookat.times(this.params.eaterSize*e.DPR).add(o.getPosition()),u=c.sub(o.getPosition()).angle(),g=Math.PI/1.3,p=new h.Vector2D(Math.cos(u+g),Math.sin(u+g)),f=new h.Vector2D(Math.cos(u-g),Math.sin(u-g)),m=o.getPosition().add(p.times(this.params.eaterSize*e.DPR)),x=o.getPosition().add(f.times(this.params.eaterSize*e.DPR));this.ctx.moveTo(m.x/e.DPR,m.y/e.DPR),this.ctx.lineTo(c.x/e.DPR,c.y/e.DPR),this.ctx.lineTo(x.x/e.DPR,x.y/e.DPR),this.ctx.fill()}}}drawFood(){this.ctx.fillStyle="rgb(52, 73, 94)";const t=this.params.foodSize;for(const s of this.food)this.ctx.beginPath(),this.ctx.fillRect((s.x-t/2)/e.DPR,(s.y-t/2)/e.DPR,t,t),this.ctx.fill()}setSelected(t){this.followFittest=!1,this.selectedIndex=t}getSelected(){return this.population[this.selectedIndex]}getEater(t){return this.population[t]}getEaterBrain(t){return r.NeuralNet.fromWeights(this.layerSizes,this.genetics.getChromosomeAt(this.population[t].getChromosomeIdx()).getGenes()).toFunction()}toggleFastMode(){this.fastMode=!this.fastMode}getDarwinInstance(){return this.genetics}getFittestBrain(){return r.NeuralNet.fromWeights(this.layerSizes,this.genetics.getFittest().getGenes()).toFunction()}toggleMating(){this.stopMating=!this.stopMating}getSelectedIndex(){return this.selectedIndex}getParameters(){return this.params}}},157:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2D=void 0;class s{constructor(t,e){this.x=t,this.y=e}add(t){return new s(this.x+t.x,this.y+t.y)}sub(t){return new s(this.x-t.x,this.y-t.y)}plus(t){this.x+=t.x,this.y+=t.y}minus(t){this.x-=t.x,this.y-=t.y}dot(t){return this.x*t.x+this.y*t.y}hadamard(t){return t instanceof s?new s(this.x*t.x,this.y*t.y):new s(this.x*t[0],this.y*t[1])}norm(){return Math.pow(this.dot(this),.5)}normSq(){return this.dot(this)}times(t){return new s(this.x*t,this.y*t)}normalize(){return this.times(1/this.norm())}dist(t){return this.sub(t).norm()}distSq(t){return this.sub(t).normSq()}map(t){return new s(t(this.x),t(this.y))}angle(){return Math.atan2(this.y,this.x)}toArray(){return[this.x,this.y]}fromArray(t){return new s(t[0],t[1])}static fill(t){return new s(t,t)}static zeroes(){return s.fill(0)}static ones(){return s.fill(1)}static rand(){return new s(Math.random(),Math.random())}static clone(t){return new s(t.x,t.y)}}e.Vector2D=s},660:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.eventHandlers=new Map}on(t,e){var s;this.isListening(t)||this.eventHandlers.set(t,[]),null===(s=this.eventHandlers.get(t))||void 0===s||s.push(e)}isListening(t){return this.eventHandlers.has(t)}emit(t,e,s){var i;if(this.isListening(t))for(const n of null!==(i=this.eventHandlers.get(t))&&void 0!==i?i:[])n.call(s,e)}bindEvent(t,e){t.on(e,(t=>this.emit(e,t)))}removeListener(t){this.eventHandlers.delete(t)}removeListeners(){this.eventHandlers.clear()}}},666:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.MutationMethod=void 0,(s=e.MutationMethod||(e.MutationMethod={}))[s.FLIP=0]="FLIP",s[s.SWAP=1]="SWAP"},675:(t,e)=>{function s(t,e=0,n=t.length-1){const o=t[Math.floor((e+n)/2)].getFitness();if(e<n){const r=i(t,e,n,o);s(t,e,r-1),s(t,r,n)}}function i(t,e,s,i){for(;e<=s;){for(;t[e].getFitness()>i;)e++;for(;t[s].getFitness()<i;)s--;e<=s&&([t[e],t[s]]=[t[s],t[e]],e++,s--)}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.selectKBest=void 0,e.selectKBest=function(t,e){return function(t,e,n=0,o=t.length-1){const r=t[Math.floor((n+o)/2)].getFitness();if(n<o){const h=i(t,n,o,r);s(t,n,h-1),h<e&&s(t,h,o)}}(t,e),t.slice(0,e)}}},e={};function s(i){var n=e[i];if(void 0!==n)return n.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,s),o.exports}(()=>{const t=s(348),e=s(872),i=document.createElement("canvas"),n=i.getContext("2d");i.width=window.innerWidth*e.DPR,i.height=window.innerHeight*e.DPR,i.style.width=`${window.innerWidth}px`,i.style.height=`${window.innerHeight}px`,null==n||n.scale(e.DPR,e.DPR),document.body.style.padding="0",document.body.style.margin="0",document.body.appendChild(i);const o=new e.SmartEaters(i,{eliteCount:5,eliteCopies:2,ticksPerGen:2e3,populationSize:100,foodCount:120,crossoverMethod:t.CrossoverMethod.twoPoint,wrapBorders:!0,mutationRate:.02,hiddenLayersSizes:[8]});o.run(),window.addEventListener("resize",(()=>{i.style.width=`${window.innerWidth}px`,i.style.height=`${window.innerHeight}px`,i.width=window.innerWidth*e.DPR,i.height=window.innerHeight*e.DPR,null==n||n.scale(e.DPR,e.DPR)})),window.addEventListener("keypress",(t=>{switch(t.key){case" ":o.pause();break;case"f":o.followFittest=!o.followFittest;break;case"p":o.fastModeRefreshRate+=2;break;case"m":o.fastModeRefreshRate-=2,o.fastModeRefreshRate<1&&(o.fastModeRefreshRate=1);break;case"l":o.showLines=!o.showLines;break;case"h":o.hideNonSelected=!o.hideNonSelected;break;case"a":if(o.getSelectedIndex()){const t=o.getEaterBrain(o.getSelectedIndex()),e=window.URL.createObjectURL(new Blob([`\n                {\n                    'params': ${JSON.stringify(o.getParameters())},\n                    'brain': ${JSON.stringify(t)}\n                }\n                `]));window.open(`analysis.html?b=${e}`)}break;default:o.toggleFastMode()}}))})()})();