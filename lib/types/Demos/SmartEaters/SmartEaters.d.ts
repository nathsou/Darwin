import { CrossoverMethod } from "../../CrossoverMethods";
import { Darwin } from "../../Darwin";
import { Eater } from "./Eater";
import { NeuralNetFunction } from "./NeuralNet";
export declare const DPR: number;
export interface EatersParams {
    populationSize?: number;
    hiddenLayersSizes?: number[];
    foodCount?: number;
    crossoverRate?: number;
    mutationRate?: number;
    eliteCount?: number;
    eliteCopies?: number;
    maxSpeed?: number;
    maxTurnRate?: number;
    ticksPerGen?: number;
    crossoverMethod?: CrossoverMethod;
    eaterSize?: number;
    foodSize?: number;
    wrapBorders?: boolean;
}
export declare class SmartEaters {
    private genetics;
    private cnv;
    private ctx;
    private brain;
    private population;
    private food;
    private ticks;
    private layerSizes;
    private selectedIndex;
    followFittest: boolean;
    private paused;
    private fastMode;
    fastModeRefreshRate: number;
    showLines: boolean;
    hideNonSelected: boolean;
    stopMating: boolean;
    private params;
    constructor(cnv: HTMLCanvasElement, params?: EatersParams);
    private spawnFood;
    private randomPos;
    private getClosestFood;
    private tick;
    pause(): void;
    private nextGeneration;
    run(): void;
    private render;
    private drawGenerationInfo;
    private highlightSelectedEater;
    private drawEaters;
    private drawFood;
    setSelected(index: number): void;
    getSelected(): Eater;
    getEater(idx: number): Eater;
    getEaterBrain(idx: number): NeuralNetFunction;
    toggleFastMode(): void;
    getDarwinInstance(): Darwin<number>;
    getFittestBrain(): NeuralNetFunction;
    toggleMating(): void;
    getSelectedIndex(): number;
    getParameters(): Readonly<EatersParams>;
}
