(()=>{"use strict";var t={446:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Chromosome=void 0;class s{constructor(t,e,s){this.genes=[],this.fitness=0,this.randGene=e,this.randNum=s,this.genes=t,this.length=t.length}static generate(t,e,n){const o=[];for(let s=0;s<t;s++)o.push(e());return new s(o,e,n)}getFitness(){return this.fitness}setFitness(t){this.fitness=t}compare(t){let e=0;for(let s=0;s<Math.min(this.length,t.length);s++)e+=this.genes[s]!==t.genes[s]?1:0;return e}mutateWith(t=1/this.length,e){e(this,t)}crossoverWith(t,e){return e(this,t)}setGenes(t){this.genes=[...t]}getGenes(){return this.genes}copy(t){this.genes=t.genes.slice(),this.length=t.length,this.randGene=t.randGene,this.fitness=t.fitness}clone(){const t=s.generate(this.length,this.randGene,this.randNum);return t.copy(this),t}randomGene(){return this.randGene()}randomNumber(){return this.randNum()}}e.Chromosome=s},348:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.crossoverMethod=void 0,e.crossoverMethod={singlePoint:(t,e)=>{const s=Math.floor(t.randomNumber()*t.getGenes().length);return[[...t.getGenes().slice(0,s),...e.getGenes().slice(s)],[...e.getGenes().slice(0,s),...t.getGenes().slice(s)]]},twoPoint:(t,e)=>{const s=[],n=[],o=t.getGenes(),r=e.getGenes(),i=t.getGenes().length;let a=Math.floor(t.randomNumber()*i),h=Math.floor(t.randomNumber()*i);a>h&&([a,h]=[h,a]);for(let t=0;t<i;t++)s.push(t<a?o[t]:t<h?r[t]:o[t]),n.push(t<a?r[t]:t<h?o[t]:r[t]);return[s,n]},uniform:(t,e)=>{const s=[],n=[],o=t.getGenes(),r=e.getGenes(),i=t.getGenes().length;for(let e=0;e<i;e++){let i=t.randomNumber()<.5;s.push(i?r[e]:o[e]),n.push(i?o[e]:r[e])}return[s,n]},halfUniform:(t,e)=>{let s=[],n=[];const o=t.getGenes(),r=e.getGenes(),i=t.getGenes().length,a=[];for(let t=0;t<i;t++)o[t]!==r[t]&&a.push(t);const h=a.length;s=o.slice(),n=r.slice();for(let e=0;e<h/2;e++){let e=Math.floor(t.randomNumber()*a.length);s[a[e]]=r[a[e]],n[a[e]]=o[a[e]],a.splice(e,1)}return[s,n]},ordered:(t,e)=>{const s=[],n=[],o=t.getGenes(),r=e.getGenes(),i=t.getGenes().length;let a=Math.floor(t.randomNumber()*i),h=Math.floor(t.randomNumber()*i),l=a;a=Math.min(a,h),h=Math.max(l,h);for(let t=a;t<h;t++)s[t]=r[t],n[t]=o[t];for(let t=0;t<i;t++){if(-1===s.indexOf(o[t]))s[t]=o[t];else for(let e=0;e<i;e++)-1===s.indexOf(o[e])&&(s[t]=o[e]);if(-1===n.indexOf(r[t]))n[t]=r[t];else for(let e=0;e<r.length;e++)-1===n.indexOf(r[e])&&(n[t]=r[e])}return[s,n]}}},803:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Darwin=void 0;const n=s(446),o=s(348),r=s(666),i=s(675);e.Darwin=class{constructor(t){this.population=[],this.statsNeedUpdate=!0,this.generation=0,this.params=Object.assign({crossoverRate:.7,mutationRate:1/t.populationSize,crossoverMethod:o.crossoverMethod.singlePoint,mutationMethod:r.mutationMethod.flip,eliteCount:Math.ceil(t.populationSize/25),eliteCopies:1,randomNumber:Math.random},t);for(let e=0;e<t.populationSize;e++){const t=n.Chromosome.generate(this.params.chromosomeLength,this.params.randomGene,this.params.randomNumber);this.population.push(t)}this.stats={fittest:this.population[0],averageFitness:0,totalFitness:0,fittestIndex:0}}duplicateElite(t){const{eliteCount:e,eliteCopies:s}=this.params;if(e>0){const n=this.getTopChromosomes(e);t.push(...n);for(let o=0;o<e;o++)for(let e=0;e<s;e++)t.push(n[o].clone())}}crossover(t){const{populationSize:e,crossoverRate:s,crossoverMethod:o,randomGene:r,randomNumber:i}=this.params;for(;t.length<e;)if(this.params.randomNumber()<s){const e=this.getRandomChromosome(),s=this.getRandomChromosome(),[a,h]=e.crossoverWith(s,o);t.push(new n.Chromosome(a,r,i),new n.Chromosome(h,r,i))}this.params.populationSize%2==1&&t.pop()}mutate(t){for(const e of t)e.mutateWith(this.params.mutationRate,this.params.mutationMethod)}updateFitness(t){for(let e=0;e<this.population.length;e++){const s=this.population[e];s.setFitness(t(s.getGenes()))}}mate(){const t=[];this.duplicateElite(t),this.crossover(t),this.mutate(t),this.population=t,this.generation+=1,this.statsNeedUpdate=!0}getPopulation(){return this.population}getChromosomeAt(t){return this.population[t]}getRandomChromosome(){if(this.updateStats(),0===this.stats.totalFitness)return this.population[Math.floor(this.params.randomNumber()*this.population.length)];const t=this.params.randomNumber()*this.stats.totalFitness;let e=0;for(let s=0;s<this.population.length;s++)if(e+=this.population[s].getFitness(),e>t)return this.population[s];return this.population[0]}getTopChromosomes(t){return i.selectKBest(this.population,t)}getParams(){return this.params}getGeneration(){return this.generation}getStats(){return this.stats}updateStats(t=!1){if(t||this.statsNeedUpdate){let t=0,e=0,s=0;for(let n=0;n<this.population.length;n++){const o=this.population[n].getFitness();t+=o,o>e&&(e=o,s=n)}this.stats.totalFitness=t,this.stats.averageFitness=t/this.params.populationSize,this.stats.fittest=this.population[s].clone(),this.stats.fittestIndex=s,this.statsNeedUpdate=!1}return this.stats}}},24:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MonkeyFactory=e.randChar=e.alphabet=void 0;const n=s(803);function o(){return e.alphabet[Math.floor(Math.random()*e.alphabet.length)]}function r(t,e){let s=0,n=Math.max(t.length,e.length)-Math.min(t.length,e.length);for(let n=0;n<Math.min(t.length,e.length);n++)s+=Number(t[n]!==e[n]);return s+n}e.alphabet=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"," ","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","?","!",".","#","@","&","*","$","%","+","-","/","=","0","1","2","3","4","5","6","7","8","9","(",")",",","'",'"',":","_","-"],e.randChar=o,e.MonkeyFactory=class{constructor(t){this.params=Object.assign(Object.assign({},t),{randomGene:o})}*search(t){this.params.chromosomeLength=t.length;const e=new n.Darwin(this.params);for(;;){for(const s of e.getPopulation()){const n=r(s.getGenes().join(""),t);if(s.setFitness(Math.pow(2,t.length-n)),0===n)return{generation:e.getGeneration(),averageFitness:e.getStats().averageFitness,fittest:s}}e.mate();const{averageFitness:s,fittest:n}=e.getStats();yield{averageFitness:s,fittest:n,generation:e.getGeneration()}}}}},666:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.mutationMethod=void 0,e.mutationMethod={flip:(t,e)=>{const s=t.getGenes(),n=s.length;for(let o=0;o<n;o++)t.randomNumber()<e&&(s[o]=t.randomGene())},swap:(t,e)=>{const s=t.getGenes(),n=s.length;for(let o=0;o<n;o++)if(t.randomNumber()<e){const t=Math.floor(Math.random()*n);[s[o],s[t]]=[s[t],s[o]]}}}},675:(t,e)=>{function s(t,e=0,o=t.length-1){const r=t[Math.floor((e+o)/2)].getFitness();if(e<o){const i=n(t,e,o,r);s(t,e,i-1),s(t,i,o)}}function n(t,e,s,n){for(;e<=s;){for(;t[e].getFitness()>n;)e++;for(;t[s].getFitness()<n;)s--;e<=s&&([t[e],t[s]]=[t[s],t[e]],e++,s--)}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.selectKBest=void 0,e.selectKBest=function(t,e){return function(t,e,o=0,r=t.length-1){const i=t[Math.floor((o+r)/2)].getFitness();if(o<r){const a=n(t,o,r,i);s(t,o,a-1),a<e&&s(t,a,r)}}(t,e),t.slice(0,e)}}},e={};function s(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,s),r.exports}(()=>{const t=s(24),e=(t,e={},s={})=>{const n=document.createElement(t);for(const[t,s]of Object.entries(e))n[t]=s;for(const t in s){const e=s[t];void 0!==e&&(n.style[t]=e)}return n},n=(t,e)=>{for(const s of e)t.appendChild(s);return t},o=()=>e("br"),r=(t,s)=>{const o=e("input",s);var r;return{elem:n(e("div"),[(r=t,e("span",{textContent:r})),o]),value:()=>o.value}},i=e("input",{type:"text",value:"https://en.wikipedia.org/wiki/Genetic_algorithm"},{width:"400px"}),a=e("button",{textContent:"Go"}),h=e("p",{},{fontSize:"24px"}),l=e("div",{},{fontSize:"24px"}),u=r("Population",{type:"number",value:"200"}),p=r("Crossover rate",{type:"number",value:"0.7",min:"0",max:"1",step:"0.01"}),m=r("Mutation rate",{type:"number",value:"0.02",min:"0",max:"1",step:"0.01"}),c=r("Elite count",{type:"number",value:"15"}),g=r("Elite copies",{type:"number",value:"2"}),d=n(e("div",{},{width:"350px"}),[u.elem,p.elem,m.elem,c.elem,g.elem]);n(document.body,[i,a,o(),h,o(),l,o(),d]),a.addEventListener("click",(()=>{const e=i.value,s=e.split("").find((e=>!t.alphabet.includes(e)));if(s)alert(`The character '${s}' cannot be used`);else{const s=new t.MonkeyFactory({populationSize:parseInt(u.value()),chromosomeLength:e.length,crossoverRate:parseFloat(p.value()),mutationRate:parseFloat(m.value()),eliteCount:parseInt(c.value(),10),eliteCopies:parseInt(g.value(),10)}).search(e),n=()=>{const t=s.next();h.textContent=t.value.fittest.getGenes().join("");const o=Math.log2(t.value.fittest.getFitness())/e.length,r=Math.log2(t.value.averageFitness)/e.length;l.innerHTML=`generation: ${t.value.generation}</br>\n                average fitness: ${(100*r).toFixed(4)}% </br>\n                max fitness: ${(100*o).toFixed(4)}% `,t.done||requestAnimationFrame(n)};n()}}))})()})();