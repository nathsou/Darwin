(()=>{"use strict";var t={446:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Chromosome=void 0;const n=s(660),o=s(666);class i extends n.default{constructor(t,e){super(),this.genes=[],this.fitness=0,this.randGene=e,this.genes=t,this.length=t.length}static generate(t,e){const s=[];for(let n=0;n<t;n++)s.push(e());return new i(s,e)}getFitness(){return this.fitness}setFitness(t){this.fitness=t,this.emit("update_fitness",t)}compare(t){let e=0;for(let s=0;s<Math.min(this.length,t.length);s++)e+=this.genes[s]!==t.genes[s]?1:0;return e}mutateFlip(t){for(let e=0;e<this.length;e++)Math.random()<t&&(this.genes[e]=this.randGene())}mutateSwap(t){for(let e=0;e<this.length;e++)if(Math.random()<t){const t=Math.floor(Math.random()*this.length),s=this.genes[e];this.genes[e]=this.genes[t],this.genes[t]=s}}mutate(t=1/this.length,e){if("number"==typeof e)switch(e){case o.MutationMethod.FLIP:this.mutateFlip(t);break;case o.MutationMethod.SWAP:this.mutateSwap(t)}else this.setGenes(e(this.getGenes()))}crossoverWith(t,e){return e(this,t)}setGenes(t){this.genes=[...t]}getGenes(){return this.genes}copy(t){this.genes=t.genes.slice(),this.length=t.length,this.randGene=t.randGene,this.fitness=t.fitness}clone(){const t=i.generate(this.length,this.randGene);return t.copy(this),t}}e.Chromosome=i},348:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CrossoverMethod=void 0,e.CrossoverMethod={singlePoint:(t,e)=>{const s=Math.floor(Math.random()*t.getGenes().length);return[[...t.getGenes().slice(0,s),...e.getGenes().slice(s)],[...e.getGenes().slice(0,s),...t.getGenes().slice(s)]]},twoPoint:(t,e)=>{const s=[],n=[],o=t.getGenes(),i=e.getGenes(),a=t.getGenes().length;let r=Math.floor(Math.random()*a),h=Math.floor(Math.random()*a);r>h&&([r,h]=[h,r]);for(let t=0;t<a;t++)s.push(t<r?o[t]:t<h?i[t]:o[t]),n.push(t<r?i[t]:t<h?o[t]:i[t]);return[s,n]},uniform:(t,e)=>{const s=[],n=[],o=t.getGenes(),i=e.getGenes(),a=t.getGenes().length;for(let t=0;t<a;t++){let e=Math.random()<.5;s.push(e?i[t]:o[t]),n.push(e?o[t]:i[t])}return[s,n]},halfUniform:(t,e)=>{let s=[],n=[];const o=t.getGenes(),i=e.getGenes(),a=t.getGenes().length,r=[];for(let t=0;t<a;t++)o[t]!==i[t]&&r.push(t);const h=r.length;s=o.slice(),n=i.slice();for(let t=0;t<h/2;t++){let t=Math.floor(Math.random()*r.length);s[r[t]]=i[r[t]],n[r[t]]=o[r[t]],r.splice(t,1)}return[s,n]},ordered:(t,e)=>{const s=[],n=[],o=t.getGenes(),i=e.getGenes(),a=t.getGenes().length;let r=Math.floor(Math.random()*a),h=Math.floor(Math.random()*a),l=r;r=Math.min(r,h),h=Math.max(l,h);for(let t=r;t<h;t++)s[t]=i[t],n[t]=o[t];for(let t=0;t<a;t++){if(-1===s.indexOf(o[t]))s[t]=o[t];else for(let e=0;e<a;e++)-1===s.indexOf(o[e])&&(s[t]=o[e]);if(-1===n.indexOf(i[t]))n[t]=i[t];else for(let e=0;e<i.length;e++)-1===n.indexOf(i[e])&&(n[t]=i[e])}return[s,n]}}},803:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Darwin=void 0;const n=s(446),o=s(348),i=s(666),a=s(675);e.Darwin=class{constructor(t){this.population=[],this.generation=0;const e=()=>{this.stats.needsUpdate=!0};for(let s=0;s<t.populationSize;s++){const s=n.Chromosome.generate(t.chromosomeLength,t.randGene);s.on("update_fitness",e),this.population.push(s)}this.params=Object.assign({crossoverRate:.7,mutationRate:1/t.populationSize,crossoverMethod:o.CrossoverMethod.singlePoint,mutationMethod:i.MutationMethod.FLIP,eliteCount:Math.ceil(t.populationSize/25),eliteCopies:1},t),this.stats={fittest:this.population[0],averageFitness:0,totalFitness:0,fittestIndex:0,needsUpdate:!0}}duplicateElite(t){const{eliteCount:e,eliteCopies:s}=this.params;if(e>0){const n=this.getTopChromosomes(e);t.push(...n);for(let o=0;o<e;o++)for(let e=0;e<s;e++)t.push(n[o].clone())}}crossover(t){const{populationSize:e,crossoverRate:s,crossoverMethod:o,randGene:i}=this.params;for(;t.length<e;)if(Math.random()<s){const e=this.getRandomChromosome(),s=this.getRandomChromosome(),[a,r]=e.crossoverWith(s,o);t.push(new n.Chromosome(a,i),new n.Chromosome(r,i))}this.params.populationSize%2==1&&t.pop()}mutate(t){for(const e of t)e.mutate(this.params.mutationRate,this.params.mutationMethod)}updateFitness(t){for(let e=0;e<this.population.length;e++){const s=this.population[e];s.setFitness(t(s.getGenes()))}this.stats.needsUpdate=!0}mate(){const t=[];this.duplicateElite(t),this.crossover(t),this.mutate(t),this.population=t,this.generation+=1,this.updateStats(!0)}getPopulation(){return this.population}getChromosomeAt(t){return this.population[t]}getRandomChromosome(){if(this.updateStats(),0===this.stats.totalFitness)return this.population[Math.floor(Math.random()*this.population.length)];const t=Math.random()*this.stats.totalFitness;let e=0;for(let s=0;s<this.population.length;s++)if(e+=this.population[s].getFitness(),e>t)return this.population[s];return this.population[0]}getTopChromosomes(t){return a.selectKBest(this.population,t)}getAverageFitness(){return this.updateStats(),this.stats.averageFitness}getFittest(){return this.updateStats(),this.stats.fittest}getParams(){return this.params}getGeneration(){return this.generation}getStats(){return this.stats}updateStats(t=!1){if(t||this.stats.needsUpdate){let t=0,e=0,s=0;for(let n=0;n<this.population.length;n++){const o=this.population[n].getFitness();t+=o,o>e&&(e=o,s=n)}this.stats.totalFitness=t,this.stats.averageFitness=t/this.params.populationSize,this.stats.fittest=this.population[s].clone(),this.stats.fittestIndex=s,this.stats.needsUpdate=!1}}}},24:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MonkeyFactory=e.randChar=e.alphabet=void 0;const n=s(803);function o(){return e.alphabet[Math.floor(Math.random()*e.alphabet.length)]}function i(t,e){let s=0,n=Math.max(t.length,e.length)-Math.min(t.length,e.length);for(let n=0;n<Math.min(t.length,e.length);n++)s+=Number(t[n]!==e[n]);return s+n}e.alphabet=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"," ","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","?","!",".","#","@","&","*","$","%","+","-","/","=","0","1","2","3","4","5","6","7","8","9","(",")",",","'",'"',":","_","-"],e.randChar=o,e.MonkeyFactory=class{constructor(t){this.params=Object.assign(Object.assign({},t),{randGene:o})}*search(t){this.params.chromosomeLength=t.length;const e=new n.Darwin(this.params);for(;;){for(const s of e.getPopulation()){const n=i(s.getGenes().join(""),t);if(s.setFitness(Math.pow(2,t.length-n)),0===n)return{generation:e.getGeneration(),averageFitness:e.getAverageFitness(),fittest:s}}e.mate(),yield{averageFitness:e.getAverageFitness(),fittest:e.getFittest(),generation:e.getGeneration()}}}}},660:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.eventHandlers=new Map}on(t,e){var s;this.isListening(t)||this.eventHandlers.set(t,[]),null===(s=this.eventHandlers.get(t))||void 0===s||s.push(e)}isListening(t){return this.eventHandlers.has(t)}emit(t,e,s){var n;if(this.isListening(t))for(const o of null!==(n=this.eventHandlers.get(t))&&void 0!==n?n:[])o.call(s,e)}bindEvent(t,e){t.on(e,(t=>this.emit(e,t)))}removeListener(t){this.eventHandlers.delete(t)}removeListeners(){this.eventHandlers.clear()}}},666:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.MutationMethod=void 0,(s=e.MutationMethod||(e.MutationMethod={}))[s.FLIP=0]="FLIP",s[s.SWAP=1]="SWAP"},675:(t,e)=>{function s(t,e=0,o=t.length-1){const i=t[Math.floor((e+o)/2)].getFitness();if(e<o){const a=n(t,e,o,i);s(t,e,a-1),s(t,a,o)}}function n(t,e,s,n){for(;e<=s;){for(;t[e].getFitness()>n;)e++;for(;t[s].getFitness()<n;)s--;e<=s&&([t[e],t[s]]=[t[s],t[e]],e++,s--)}return e}Object.defineProperty(e,"__esModule",{value:!0}),e.selectKBest=void 0,e.selectKBest=function(t,e){return function(t,e,o=0,i=t.length-1){const a=t[Math.floor((o+i)/2)].getFitness();if(o<i){const r=n(t,o,i,a);s(t,o,r-1),r<e&&s(t,r,i)}}(t,e),t.slice(0,e)}}},e={};function s(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,s),i.exports}(()=>{const t=s(24),e=(t,e={},s={})=>{const n=document.createElement(t);for(const[t,s]of Object.entries(e))n[t]=s;for(const t in s){const e=s[t];void 0!==e&&(n.style[t]=e)}return n},n=(t,e)=>{for(const s of e)t.appendChild(s);return t},o=()=>e("br"),i=(t,s)=>{const o=e("input",s);var i;return{elem:n(e("div"),[(i=t,e("span",{textContent:i})),o]),value:()=>o.value}},a=e("input",{type:"text",value:"https://en.wikipedia.org/wiki/Genetic_algorithm"},{width:"400px"}),r=e("button",{textContent:"Go"}),h=e("p",{},{fontSize:"24px"}),l=e("div",{},{fontSize:"24px"}),u=i("Population",{type:"number",value:"200"}),p=i("Crossover rate",{type:"number",value:"0.7",min:"0",max:"1",step:"0.01"}),g=i("Mutation rate",{type:"number",value:"0.02",min:"0",max:"1",step:"0.01"}),c=i("Elite count",{type:"number",value:"15"}),d=i("Elite copies",{type:"number",value:"2"}),m=n(e("div",{},{width:"350px"}),[u.elem,p.elem,g.elem,c.elem,d.elem]);n(document.body,[a,r,o(),h,o(),l,o(),m]),r.addEventListener("click",(()=>{const e=a.value,s=e.split("").find((e=>!t.alphabet.includes(e)));if(s)alert(`The character '${s}' cannot be used`);else{const s=new t.MonkeyFactory({populationSize:parseInt(u.value()),chromosomeLength:e.length,crossoverRate:parseFloat(p.value()),mutationRate:parseFloat(g.value()),eliteCount:parseInt(c.value(),10),eliteCopies:parseInt(d.value(),10)}).search(e),n=()=>{const t=s.next();h.textContent=t.value.fittest.getGenes().join("");const o=Math.log2(t.value.fittest.getFitness())/e.length,i=Math.log2(t.value.averageFitness)/e.length;l.innerHTML=`generation: ${t.value.generation}</br>\n                average fitness: ${(100*i).toFixed(4)}% </br>\n                max fitness: ${(100*o).toFixed(4)}% `,t.done||requestAnimationFrame(n)};n()}}))})()})();